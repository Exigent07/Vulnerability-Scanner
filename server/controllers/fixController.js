const { all } = require('../routes/api');
const prompt = require('../utils/fixUtils');

// Controller for vulnFix
exports.vulnFix = async (req, res) => {
    // vulnerability name
    const vulnerability = req.body.vulnerability;

    // Allow list
    const allowed = {
        SQLi: "What is SQL Injection (SQLi), and how can it be exploited in web applications? Give implementation of the fix for this in different programming languages.",
        NoSQLi: "What is NoSQL Injection (NoSQLi), and how does it differ from SQL Injection? Give implementation of the fix for this in different programming languages.",
        RaceCondition: "Explain what a Race Condition vulnerability is and how it can impact application security. Give implementation of the fix for this in different programming languages.",
        Deserialization: "What is Deserialization Vulnerability, and how can attackers exploit it? Give implementation of the fix for this in different programming languages.",
        XSS: "What are Cross-Site Scripting (XSS) attacks, and what are the potential consequences for web applications? Give implementation of the fix for this in different programming languages.",
        CSRF: "Describe Cross-Site Request Forgery (CSRF) attacks and how they can be prevented. Give implementation of the fix for this in different programming languages.",
        IDOR: "What is Insecure Direct Object Reference (IDOR), and why is it a security concern? Give implementation of the fix for this in different programming languages.",
        BrokenAuth: "Discuss Broken Authentication vulnerabilities and best practices for secure authentication. Give implementation of the fix for this in different programming languages.",
        SensitiveDataExposure: "What is Sensitive Data Exposure, and how can developers protect sensitive information? Give implementation of the fix for this in different programming languages.",
        XXE: "Explain XML External Entity (XXE) Injection and potential risks associated with it. Give implementation of the fix for this in different programming languages.",
        SSRF: "What is Server-Side Request Forgery (SSRF), and how can it be used in attacks? Give implementation of the fix for this in different programming languages.",
        RCE: "Describe Remote Code Execution (RCE) vulnerabilities and their impact on systems. Give implementation of the fix for this in different programming languages.",
        PathTraversal: "What is Path Traversal, and what are the risks associated with it? Give implementation of the fix for this in different programming languages.",
        SSTI: "What is Server-Side Template Injection (SSTI), and how can it be exploited in web applications? Give implementation of the fix for this in different programming languages.",
        DOMClobbering: "Explain DOM Clobbering vulnerability and its impact on web security. Give implementation of the fix for this in different programming languages.",
        HTTPRequestSmuggling: "Describe HTTP Request Smuggling (HRS) vulnerability and how it can be exploited. Give implementation of the fix for this in different programming languages.",
        InsecureLogging: "What are the risks of Insecure Logging, and how can logging be improved for better security? Give implementation of the fix for this in different programming languages.",
        CSSInjection: "What is CSS Injection, and how can attackers exploit it? Give implementation of the fix for this in different programming languages.",
        VulnerableComponents: "How do Vulnerable and Outdated Components expose applications to risks? Give implementation of the fix for this in different programming languages."
    };

    if (!Object.keys(allowed).includes(vulnerability)) {
        // Don't allow anything other than that list
        res.status(403).send({error: "Not allowed"});
        return;
    }
    
    // Get the response (Fix for the vulnerability)
    prompt(allowed[vulnerability])
        .then(text => {
            console.log('Response:', text);
            res.send({ data: text });
        })
        .catch(error => {
            console.error('Error:', error);
            res.status(500).send({ error: "Internal Server Error" });
        });
};
