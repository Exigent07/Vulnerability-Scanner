const { curlRequest } = require('../utils/curlUtils');
const { pathTraversal } = require('../utils/vulnerabilitiesUtils/pathTraversalUtils');
const { fetchRequest } = require('../utils/fetchUtils');
const getOutDated = require('../utils/techScannerUtils');

// Controller for scan
exports.scan = async (req, res) => {
    // Result object
    let scanResult = {};

    // Checking if the site is up
    const url = req.body.url;
    console.log(`URL: ${url}`);
    // Add URL
    scanResult['website'] = url;
    const options = {
        responseCode: true
    };

    const securityHeaders = [
        'X-Frame-Options',
        'Content-Security-Policy',
        'Strict-Transport-Security',
        'X-Content-Type-Options',
        'Referrer-Policy',
        'Feature-Policy'
    ];

    try {
        // Check site response code
        const responseCode = (await curlRequest(url, options)).response;
        console.log('Response Code:', responseCode);
        if (responseCode !== '200' && responseCode !== '302') {
            return res.status(responseCode).send({ error: "Site is not up!" });
        }

        // Check for security headers
        const headersData = (await fetchRequest(url, { getHeaders: true })).headers;
        
        // Check each header not in securityHeaders
        let missingHeaders = [];
        for (const header of securityHeaders) {
            if (!headersData.hasOwnProperty(header)) {
                missingHeaders.push(header);
            }
        }             
        scanResult['missingHeaders'] = missingHeaders;
        console.log(`Missing Headers: ${missingHeaders}`);

        // Check for outdated
        scanResult['outDated'] = await getOutDated(url);
        
        // Check for path traversal
        // const traversalResult = await pathTraversal(url);
        // scanResult['pathTraversal'] = traversalResult;

        // Send the final scan result
        console.log("Result:", scanResult);
        return res.status(200).send({ result : scanResult });
    } catch (error) {
        console.error('Error:', error);
        return res.status(500).send({ error: "Internal Server Error" });
    }
};
