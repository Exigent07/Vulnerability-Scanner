const puppeteer = require('puppeteer');
const { URL } = require('url');
let visitPageAndScrape;

const scrape = async (baseURL, options = {}) => {
    const browser = await puppeteer.launch({
        timeout: 0, // Disable timeout completely
    });
    const page = await browser.newPage();
    const visitedURLs = [];
    const data = {
        scraped: {},
        exposedFiles: {}
    };

    try {
        const baseURLParsed = new URL(baseURL);
        const hostname = baseURLParsed.hostname;
        console.log('Starting scraping...');

        const sessionKey = options.session?.sessionkey;
        const sessionValue = options.session?.sessionvalue;

        console.log('Session cookie set:', sessionKey);
        if (sessionKey && sessionValue) {
            await page.setCookie({ name: sessionKey[0], value: sessionValue, url: baseURL });
            console.log('Session cookie set:', sessionKey, sessionValue);
        } else {
            console.log('Session information is missing.');
        }

        visitPageAndScrape = async (url) => {
            if (!url.includes(hostname)) {
                console.log("This doesn't belong to the host");
                return {};
            }
        
            console.log('Visiting page:', url);
            const initialResponse = await page.goto(url, { waitUntil: 'networkidle2', followRedirect: true });
        
            if (!initialResponse) {
                console.log('Error loading page or response is null.');
                return {};
            }
        
            let redirectedURL = initialResponse.url() || url;
            console.log('Page loaded:', redirectedURL);
        
            const formURL = initialResponse.request()?.url();

            const elementsInfo = await page.evaluate(() => {
                console.log('Scraping elements...');

                const elements = [];

                const getAttributes = (element) => {
                    const attributes = {};
                    Array.from(element.attributes).forEach((attr) => {
                        attributes[attr.name] = attr.value;
                    });
                    return attributes;
                };

                const anchorElements = Array.from(document.querySelectorAll('a'));
                anchorElements.forEach((element) => {
                    elements.push({
                        type: 'a',
                        href: element.href,
                        textContent: element.textContent.trim(),
                        className: element.className,
                        attributes: getAttributes(element),
                    });
                });

                const formElements = Array.from(document.querySelectorAll('form'));
                formElements.forEach((form, formIndex) => {
                    const formNumber = formIndex + 1;
                    const formAction = form.action || '';
                    const formMethod = form.method || 'GET';

                    const formInputs = Array.from(form.querySelectorAll('input, button, textarea'));
                    const formInputsInfo = [];
                    formInputs.forEach((input) => {
                        formInputsInfo.push({
                            type: input.nodeName.toLowerCase(),
                            name: input.name,
                            value: input.value,
                            className: input.className,
                            attributes: getAttributes(input),
                        });
                    });

                    elements.push({
                        type: 'form',
                        number: formNumber,
                        action: formAction,
                        method: formMethod,
                        inputs: formInputsInfo,
                        attributes: getAttributes(form),
                    });
                });

                console.log('Elements scraped:', elements.length);
                return elements;
            });

            console.log('Checking Is file');
            if (isFileURL(redirectedURL)) {
                data.exposedFiles[formURL] = elementsInfo;
                console.log('File exposed:', formURL);
                await page.goBack();
            } else {
                data.scraped[new URL(formURL, baseURL).toString()] = elementsInfo;

                const nextURL = getNextURLBasedOnScrapedData(data.scraped[formURL]);
                console.log("Next URL:", nextURL);
                if (nextURL && !visitedURLs.includes(nextURL)) {
                    console.log('Next URL found:', nextURL);
                    visitedURLs.push(nextURL);
                    await visitPageAndScrape(nextURL);
                } else {
                    console.log('All elements indexed for:', formURL);
                    await page.goBack();
                }
            }
        };

        const getNextURLBasedOnScrapedData = (scrapedData) => {
            const nextElement = scrapedData.find(element => element.type === 'a' && element.href && !visitedURLs.includes(element.href));

            if (nextElement) {
                const nextURL = new URL(nextElement.href, baseURL).toString();
                if (isFileURL(nextURL)) {
                    console.log('Next URL is a file. Skipping:', nextURL);
                    return getNextURLBasedOnScrapedData(scrapedData.filter(element => element.href !== nextURL));
                } else {
                    return nextURL;
                }
            }

            console.log('No next URL found. Going back to base URL.');
            return baseURL;
        };

        const isFileURL = (url) => {
            const fileExtensions = [
                '.pdf', '.docx', '.txt', '.pptx', '.xlsx', '.csv', '.jpg', '.png', '.gif', '.mp3', '.mp4',
                '.avi', '.mov', '.wav', '.zip', '.rar', '.tar', '.gz', '.7z', '.css', '.js', '.json'
            ];
            const lowerCaseUrl = url.toLowerCase();
            return fileExtensions.some(extension => lowerCaseUrl.endsWith(extension));
        };

        const initialURL = baseURL;
        visitedURLs.push(initialURL);
        await visitPageAndScrape(initialURL);
    } catch (error) {
        console.error('Error during scraping:', error);
    }

    const allHrefURLs = Array.from(new Set(Object.values(data.scraped).flatMap(obj => obj.map(el => el.href))));
    const remainingURLs = allHrefURLs.filter(href => !Object.keys(data.scraped).includes(href));

    console.log('Remaining URLs:', remainingURLs);

    for (const remainingURL of remainingURLs) {
        console.log('Scraping remaining URL:', remainingURL);
        await visitPageAndScrape(remainingURL);
    }

    console.log('Scraped data:', data.scraped);
    console.log('Exposed files:', data.exposedFiles);
    return data.scraped;
};

module.exports = scrape;
