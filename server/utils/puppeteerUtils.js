const puppeteer = require('puppeteer');

const scrape = async (baseURL) => {
    const browser = await puppeteer.launch({
        timeout: 0, // Disable timeout completely
    });
    const page = await browser.newPage();
    const visitedURLs = [];
    const data = {
        scraped: {},
        exposedFiles: {}
    };

    try {
        console.log('Starting scraping...');

        const visitPageAndScrape = async (url) => {
            console.log('Visiting page:', url);
            const initialResponse = await page.goto(url, { waitUntil: 'networkidle2', followRedirect: true });
            const redirectedURL = initialResponse.url(); // Get the final URL after following redirects
            console.log('Page loaded:', redirectedURL);
        
            const formURL = initialResponse.request().url();
        
            const elementsInfo = await page.evaluate(() => {
                console.log('Scraping elements...');
        
                const elements = [];
        
                const getAttributes = (element) => {
                    const attributes = {};
                    Array.from(element.attributes).forEach((attr) => {
                        attributes[attr.name] = attr.value;
                    });
                    return attributes;
                };
        
                const anchorElements = Array.from(document.querySelectorAll('a'));
                anchorElements.forEach((element) => {
                    elements.push({
                        type: 'a',
                        href: element.href,
                        textContent: element.textContent.trim(),
                        className: element.className,
                        attributes: getAttributes(element),
                    });
                });
        
                const formElements = Array.from(document.querySelectorAll('form'));
                formElements.forEach((form, formIndex) => {
                    const formNumber = formIndex + 1;
                    const formAction = form.action || '';
                    const formMethod = form.method || 'GET';
        
                    const formInputs = Array.from(form.querySelectorAll('input, button, textarea'));
                    const formInputsInfo = [];
                    formInputs.forEach((input) => {
                        formInputsInfo.push({
                            type: input.nodeName.toLowerCase(),
                            name: input.name,
                            value: input.value,
                            className: input.className,
                            attributes: getAttributes(input),
                        });
                    });
        
                    elements.push({
                        type: 'form',
                        number: formNumber,
                        action: formAction,
                        method: formMethod,
                        inputs: formInputsInfo,
                        attributes: getAttributes(form),
                    });
                });
        
                console.log('Elements scraped:', elements.length);
                return elements;
            });
        
            // Check if the URL is a file
            if (isFileURL(redirectedURL)) {
                data.exposedFiles[formURL] = elementsInfo;
                console.log('File exposed:', formURL);
                await page.goBack();
            } else {
                data.scraped[formURL] = elementsInfo;
        
                const nextURL = getNextURLBasedOnScrapedData(data.scraped[formURL]);
                if (nextURL && !visitedURLs.includes(nextURL)) {
                    console.log('Next URL found:', nextURL);
                    visitedURLs.push(nextURL);
                    await visitPageAndScrape(nextURL);
                } else {
                    console.log('All elements indexed for:', formURL);
                    await page.goBack();
                }
            }
        };
        

        const getNextURLBasedOnScrapedData = (scrapedData) => {
            const nextElement = scrapedData.find(element => element.type === 'a' && element.href && !visitedURLs.includes(element.href));
        
            if (nextElement) {
                const nextURL = nextElement.href;
                if (isFileURL(nextURL)) {
                    console.log('Next URL is a file. Skipping:', nextURL);
                    return getNextURLBasedOnScrapedData(scrapedData.filter(element => element.href !== nextURL));
                } else {
                    return nextURL;
                }
            }
        
            return null;
        };
        

        const isFileURL = (url) => {
            const fileExtensions = [
                '.pdf', '.docx', '.txt', '.pptx', '.xlsx', '.csv', '.jpg', '.png', '.gif', '.mp3', '.mp4',
                '.avi', '.mov', '.wav', '.zip', '.rar', '.tar', '.gz', '.7z', '.html', '.css', '.js', '.json'
            ];
            const lowerCaseUrl = url.toLowerCase();
            return fileExtensions.some(extension => lowerCaseUrl.endsWith(extension));
        };

        const initialURL = baseURL;
        visitedURLs.push(initialURL);
        await visitPageAndScrape(initialURL);
    } catch (error) {
        console.error('Error during scraping:', error);
    } finally {
        await browser.close();
    }

    console.log('Scraped data:', data.scraped);
    console.log('Exposed files:', data.exposedFiles);
};

module.exports = scrape;