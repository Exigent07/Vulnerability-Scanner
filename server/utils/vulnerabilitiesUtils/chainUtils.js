const axios = require('axios');
const { getData } = require('./sqliUtils');
const scrape = require('../puppeteerUtils');
const { 
    pathTraversalCheck,
    checkSQLi,

} = require('../../controllers/standAloneController');

const chainAll = async (scanResult, url) => {
    const urls = Object.keys(global.scrapedData);
    const loginUrls = urls.filter(urlValue => /\/login(?:\.\w+)?$/.test(urlValue));
    let sessionCookie;

    try {
        if (loginUrls.length > 0) {
            const htmlResponse = await axios.get(loginUrls[0]);
            const htmlContent = htmlResponse.data;
            console.log(htmlContent);
            const { queryParams, formDataNames } = await getData(htmlContent);
            const res = await fetch(url, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    url: loginUrls[0],
                    data: formDataNames,
                }),
            });
            const data = await res.json();
            const sessionKey = Object.keys(data);
            const cookieValue = data[sessionKey]
            console.log("Response data:", sessionKey, cookieValue);
            console.log('Scraping with login cookie');
            global.scrapedData = await scrape(url, { session: { sessionkey: sessionKey, sessionvalue: cookieValue } });
        }

        // Check for path traversal
        scanResult['pathTraversal'] = await pathTraversalCheck(data);

        // Check for SQLi vulnerability
        scanResult['SQLi'] = await checkSQLi(data);
    } catch (error) {
        console.error('Error:', error);
        return { error: "Internal Server Error" };
    }
}

(async () => {
    global.scrapedData = await scrape('http://localhost:8080');
    await chainAll({}, 'http://localhost:8080');
})();

module.exports = chainAll;
