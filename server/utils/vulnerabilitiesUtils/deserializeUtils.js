const prompt = require('../fixUtils');
const axios = require('axios');
const phpUnserialize = require('php-unserialize');
const { decode } = require('js-base64');

const findDeserialize = async (html) => {
    const code = `
    ${html}

    Given the HTML code, please extract and return the PHP serialized data only if found. If not found, return 'N'.
    `;
    const response = await prompt(code);
    const serializedData = response;

    console.log(`Serialized data: ${serializedData}`);
    return { data: serializedData || 'N' };
}

const findDeserializeCookie = async (url) => {
    try {
        const response = await axios.get(url);

        const cookieString = response.headers['set-cookie'];

        if (cookieString && cookieString.length > 0) {
            const cookiesArray = cookieString.split(';');

            const serializedCookies = cookiesArray.map(cookie => {
                try {
                    const obj = phpUnserialize(cookie.trim());
                    return { cookie, data: obj };
                } catch (error) {
                    const decodedCookie = decodeCookie(cookie);
                    if (decodedCookie !== false) {
                        try {
                            const obj = phpUnserialize(decodedCookie.trim());
                            return { cookie, data: obj };
                        } catch (err) {
                            return false;
                        }
                    } else {
                        return false; 
                    }
                }
            }).filter(cookieData => cookieData !== false);

            return serializedCookies;
        } else {
            return { error: 'No cookies found in the response.' };
        }
    } catch (error) {
        return { error: 'Server Error' };
    }
};

const decodeCookie = (cookie) => {
    try {
        const decoders = ['base64', 'base32', 'hex'];
        for (const decoder of decoders) {
            const decoded = decode(cookie, decoder);
            if (decoded) {
                return decoded;
            }
        }
        return false;
    } catch (error) {
        return false;
    }
};


module.exports = {
    findDeserialize,
    findDeserializeCookie,
    
}