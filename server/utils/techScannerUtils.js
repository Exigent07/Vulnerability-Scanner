require('dotenv').config();
const generativeAI = require('./fixUtils');
const { fetchRequest } = require('./fetchUtils');

const stack = async (url) => {
    let outDatedApps = {};
    try {
        if (url.includes('localhost')) {
            console.log('The URL contains "localhost". Returning immediately.');
            return { data: "You can't outsmart me." };
        }

        const domainRegex = /^(https?:\/\/[^/:]+)(?::\d+)?(\/.*)?$/i;
        
        const match = url.match(domainRegex);
        const domain = match ? match[1] : url;
        const request = await fetchRequest(`https://api.larger.io/v1/search/key/${process.env.X_API_KEY}?domain=${domain}&live=1`, {
            json: true,
        });

        const apps = await request['data']['apps'];
        console.log(apps);

        for (let app of apps) {
            const prompt = `Latest version of ${app.name}: Give only the version`;
            const latestVersion = await generativeAI(prompt);
            // Using a Free AI, can be inaccurate
            if (app.version !== latestVersion) {
                outDatedApps[app.name] = app.version;
            }
        }

        // Return the data
        console.log(`OutdatedApps: ${Object.keys(outDatedApps).join(', ')}`);
        return { data: outDatedApps };
    } catch (error) {
        console.error('Error fetching stack data:', error);
        return { data : "Unable to get the data"};
    }
}

module.exports = stack;