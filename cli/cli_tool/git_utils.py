import subprocess
import os


def git_init(repo_path):
    """Initialize a Git repository."""
    try:
        subprocess.run(["git", "init", repo_path], check=True)
        print("Initialized empty Git repository")
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")


def git_add(repo_path, file_paths):
    """Stage files for commit."""
    try:
        subprocess.run(["git", "add"] + file_paths, cwd=repo_path, check=True)
        print("Staged files for commit")
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")


def git_commit(repo_path, message):
    """Commit staged changes."""
    try:
        subprocess.run(["git", "commit", "-m", message], cwd=repo_path, check=True)
        print("Committed changes")
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")


def git_status(repo_path):
    """Get the status of the repository."""
    try:
        result = subprocess.run(["git", "status", "--porcelain"], cwd=repo_path, check=True, capture_output=True, text=True)
        return result.stdout.strip()
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")
        return None


def git_push(repo_path, remote_name="origin", branch="master"):
    """Push changes to a remote repository."""
    try:
        subprocess.run(["git", "push", remote_name, branch], cwd=repo_path, check=True)
        print("Pushed changes to remote repository")
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")


def git_pull(repo_path, remote_name="origin", branch="master"):
    """Pull changes from a remote repository."""
    try:
        subprocess.run(["git", "pull", remote_name, branch], cwd=repo_path, check=True)
        print("Pulled changes from remote repository")
    except subprocess.CalledProcessError as e:
        print(f"Error: {e}")


def is_git_repo(repo_path):
    """Check if a directory is a Git repository."""
    return os.path.exists(os.path.join(repo_path, ".git"))
