import argparse
import json
from core import import_json_file, send_request
from colorama import Fore, Style

def print_colored_json(response):
    if "error" in response:
        print("Error:", response["error"])
        return

    data = response.get("result", {})
    if not data:
        print("No result data found in the response.")
        return

    def colorize(key, value, indent=0):
        if isinstance(value, dict):
            print(" " * indent + Fore.BLUE + "[+] " + key + ":")
            for k, v in value.items():
                colorize(k, v, indent + 2)
        elif isinstance(value, list):
            print(" " * indent + Fore.BLUE + "[+] " + key + ":")
            for v in value:
                print(" " * (indent + 2) + Fore.GREEN + "[-] " + str(v))
        elif value == {}:
            print(" " * indent + Fore.YELLOW + "[+] " + key + ":")
            print(" " * (indent + 2) + Fore.YELLOW + "[-] No vulnerabilities. You are all good.")
        else:
            print(" " * indent + Fore.BLUE + "[+] " + key + ":", Fore.GREEN + "[-] " + str(value))

    print(Style.RESET_ALL)
    colorize("result", data)

    # Handling empty sections
    sections = ["missingHeaders", "outDated", "pathTraversal", "SQLi"]
    for section in sections:
        if not data.get(section):
            print(Fore.YELLOW + f"[+] No {section} vulnerabilities found.")

def main():
    print("")
    print(Fore.CYAN + "   /$$$$$$                      /$$ /$$       /$$")
    print(Fore.YELLOW + "  /$$__  $$                    | $$| $$      |__/")
    print(Fore.CYAN + " | $$  \__/  /$$$$$$$  /$$$$$$ | $$| $$   /$$ /$$")
    print(Fore.YELLOW + " |  $$$$$$  /$$_____/ |____  $$| $$| $$  /$$/| $$")
    print(Fore.CYAN + "  \____  $$| $$        /$$$$$$$| $$| $$$$$$/ | $$")
    print(Fore.YELLOW + "  /$$  \ $$| $$       /$$__  $$| $$| $$_  $$ | $$")
    print(Fore.CYAN + " |  $$$$$$/|  $$$$$$$|  $$$$$$$| $$| $$ \  $$| $$")
    print(Fore.YELLOW + "  \______/  \_______/ \_______/|__/|__/  \__/|__/")
    print("")                                            
    print(Fore.RED + "          WEB APP VULNERABILITY SCANNER\n" + Style.RESET_ALL)
    
    parser = argparse.ArgumentParser(description='Send request to API and print JSON response structure with optional colorization.')
    
    parser.add_argument('--url', required=True, default='http://example.com', help='Target URL (default: http://example.com)')
    parser.add_argument('--data', type=json.loads, required=True, help='JSON data for the request')
    parser.add_argument('--headers', type=json.loads, default=None, help='JSON headers for the request')
    parser.add_argument('--scan_type', default='scan', help='Type of scan (default: full)')
    parser.add_argument('--api_key', required=True, help='API key')
    parser.add_argument('--file', help='Path to JSON file to import and print its structure')
    parser.add_argument('--colorize', action='store_true', help='Colorize the output (default: True)')
    
    # Help message
    help_msg = """
    This script allows you to send a request to an API and print the JSON response structure.
    You must provide the following arguments:
    - --url: API base URL (required)
    - --data: JSON data for the request (required)
    - --api_key: API key (required)
    
    Optional arguments:
    - --headers: JSON headers for the request
    - --scan_type: Type of scan (default: scan)
    - --target_url: Target URL (default: http://example.com)
    - --file: Path to JSON file to import and print its structure
    - --colorize: Colorize the output (default: True)
    """
    
    parser.epilog = help_msg

    args = parser.parse_args()

    if args.file:
        response_from_file = import_json_file(args.file)
        if response_from_file:
            print_colored_json(json.loads(response_from_file))
    else:
        url = 'http://localhost:1337/api/'
        response = send_request(url=url, api_key=args.api_key, target=args.url, scan_type=args.scan_type, data=args.data, headers=args.headers)
        print_colored_json(response)

if __name__ == "__main__":
    main()
