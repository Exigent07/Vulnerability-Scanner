import argparse
from colorama import Fore, Style
import requests

def get_website_content(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            print("Response received successfully:")
            print(response.text)
        else:
            print("Failed to get response. Status code:", response.status_code)
    except requests.exceptions.RequestException as e:
        print("Error:", e)

def scan(target, options):
    if options.get("sqli"):
        print(f"Scanning for SQL injection on {target}")
        get_website_content(f"{target}/sqli")
    if options.get("xss"):
        print(f"Scanning for XSS on {target}")
        get_website_content(f"{target}/xss")
    if options.get("idor"):
        print(f"Scanning for IDOR on {target}")
        get_website_content(f"{target}/idor")
    if options.get("ssrf"):
        print(f"Scanning for SSRF on {target}")
        get_website_content(f"{target}/ssrf")
    if options.get("ssti"):
        print(f"Scanning for SSTI on {target}")
        get_website_content(f"{target}/ssti")
    if options.get("nosqli"):
        print(f"Scanning for NoSQL injection on {target}")
        get_website_content(f"{target}/nosqli")
    else:
        print(f"No vulnerability selected for scanning")

def main():
    print("")
    print(Fore.CYAN + "   /$$$$$$                      /$$ /$$       /$$")
    print(Fore.YELLOW + "  /$$__  $$                    | $$| $$      |__/")
    print(Fore.CYAN + " | $$  \__/  /$$$$$$$  /$$$$$$ | $$| $$   /$$ /$$")
    print(Fore.YELLOW + " |  $$$$$$  /$$_____/ |____  $$| $$| $$  /$$/| $$")
    print(Fore.CYAN + "  \____  $$| $$        /$$$$$$$| $$| $$$$$$/ | $$")
    print(Fore.YELLOW + "  /$$  \ $$| $$       /$$__  $$| $$| $$_  $$ | $$")
    print(Fore.CYAN + " |  $$$$$$/|  $$$$$$$|  $$$$$$$| $$| $$ \  $$| $$")
    print(Fore.YELLOW + "  \______/  \_______/ \_______/|__/|__/  \__/|__/")
    print("")                                            
    print(Fore.RED + "          WEB APP VULNERABILITY SCANNER\n" + Style.RESET_ALL)

    parser = argparse.ArgumentParser(description="Scalki: Web App Vulnerability Scanner ")
    parser.add_argument("target", help="Target URL or IP address of the web application")
    parser.add_argument("-o", "--output", help="Output format for scan results (e.g., json, html)")
    parser.add_argument("-m", "--menu", action="store_true", help="Display a menu of vulnerabilities to scan for")
    parser.add_argument("-sqli", "--sqli", action="store_true", help="Scan for SQL injection vulnerabilities")
    parser.add_argument("-xss", "--xss", action="store_true", help="Scan for Cross-Site Scripting (XSS) vulnerabilities")
    parser.add_argument("-idor", "--idor", action="store_true", help="Scan for Insecure Direct Object Reference (IDOR) vulnerabilities")
    parser.add_argument("-ssrf", "--ssrf", action="store_true", help="Scan for Server-Side Request Forgery (SSRF) vulnerabilities")
    parser.add_argument("-ssti", "--ssti", action="store_true", help="Scan for Server-Side Template Injection (SSTI) vulnerabilities")
    parser.add_argument("-nosqli", "--nosqli", action="store_true", help="Scan for NoSQL injection vulnerabilities")
    parser._positionals.title = 'Required Arguments'
    parser._optionals.title = 'Optional Arguments'
    args = parser.parse_args()
    
    target = args.target
    output_format = args.output 
    scan_options = {}    

    if args.menu:
        print("Select vulnerability to scan for:")
        print("1. SQL Injection (SQLi)")
        print("2. Cross-Site Scripting (XSS)")
        print("3. Insecure Direct Object Reference (IDOR)")
        print("4. Server-Side Request Forgery (SSRF)")
        print("5. Server-Side Template Injection (SSTI)")
        print("6. NoSQL Injection (NoSQLi)")

        selection = input("Enter the number of vulnerability to scan for: ")
        if selection == "1":
            scan_options["sqli"] = True
        elif selection == "2":
            scan_options["xss"] = True
        elif selection == "3":
            scan_options["idor"] = True
        elif selection == "4":
            scan_options["ssrf"] = True
        elif selection == "5":
            scan_options["ssti"] = True
        elif selection == "6":
            scan_options["nosqli"] = True
        else:
            print("Invalid selection")

    scan(target, scan_options)

if __name__ == "__main__":
    main()
